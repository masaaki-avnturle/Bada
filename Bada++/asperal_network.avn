class Uitranetwork
 def virtual_connect
  load :file => {
   asperal :virtual_machine.attachment
   {
     system.require :file.attachment
     <- |list.file| :=> {
         tk.mainloop <- [XWin -multiwindow]  
         startx => file.load.environment
           in { [blidge_base | host_base].connect(wmware.dhcp)
                net_work.connect.used[wireshark.demand => exclude(file)]
          }
     }
   }
  }
 end

 def < blidge_base.network.connect
   {
    dhcp.start => {
                   host_name <-> localhost_name {|list|
                     list.exist(connect_type)
                      {
                        <- : tty :xhost -display => list.exist
                             [virtual_connect].list->host :terminal
                      }
                   }
   }
 end

 def < host_base.ethernet.connect
   {

                   host_name.connect => local_network
                  }
   }
 end
     

 def < etc.load_file
   {
    etc.include(inetd.rc)
     { 
       virtual_connect(VIRTUAL_MACHINE){|list|
        list.attachment(etc.load_file)
       }
     }
   }
 end

 mainloop{
  def.virtual_connect => xhost.localmachine
  {
   xhost.client <-> xhost.server
  }
  def.network.type <- [Omega.DATABASE] end
  def.etc.load_file.attachment(VIRTUAL_MACHINE) end
 end
end


